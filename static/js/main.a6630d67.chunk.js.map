{"version":3,"sources":["Display.js","ButtonControl.js","App.js","serviceWorker.js","index.js"],"names":["Display","render","className","props","counterColor","counterValue","React","Component","ButtonControl","onClick","functionOnClick","disabled","isDisabled","btnName","App","state","incStatus","resetStatus","changeValue","currentValue","newValue","setState","resetValue","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMASeA,G,gNALbC,OAAS,WACP,OAAO,yBAAKC,UAAW,EAAKC,MAAMC,cAAe,EAAKD,MAAME,e,6BAF1CC,IAAMC,YCUbC,E,2MATbP,OAAS,WACP,OACE,8BACE,4BAAQQ,QAAS,EAAKN,MAAMO,gBAAiBC,SAAU,EAAKR,MAAMS,YAAa,EAAKT,MAAMU,W,6BAJtEP,IAAMC,WCuDnBO,E,2MAlDbC,MAAQ,CACNV,aAAc,EACdW,UAAW,GACXC,YAAa,WACbb,aAAc,I,EAGhBc,YAAc,WACZ,IAAIC,EAAe,EAAKJ,MAAMV,aAC1Be,EAAWD,EACXA,EAAe,GACjBC,EAAWD,EAAe,EAC1B,EAAKE,SAAS,CACZhB,aAAce,EACdH,YAAa,MAGf,EAAKI,SAAS,CACZL,UAAW,WACXZ,aAAc,qB,EAKpBkB,WAAa,WAEX,EAAKD,SAAS,CACZhB,aAFa,EAGbY,YAAa,WACbD,UAAW,GACXZ,aAAc,M,EAIlBH,OAAS,WACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAASG,aAAc,EAAKU,MAAMV,aAAcD,aAAc,EAAKW,MAAMX,eACzE,yBAAKF,UAAU,kBACf,kBAAC,EAAD,CAAeQ,gBAAiB,EAAKQ,YAAaL,QAAS,MAAOD,WAAY,EAAKG,MAAMC,YACzF,kBAAC,EAAD,CAAeN,gBAAiB,EAAKY,WAAYT,QAAS,QAASD,WAAY,EAAKG,MAAME,kB,6BA3ClFX,IAAMC,WCMJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS3B,OAAO,kBAAC,EAAD,MAAS4B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a6630d67.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass Display extends React.Component {\n  render = () => {\n    return <div className={this.props.counterColor}>{this.props.counterValue}</div>;\n  };\n}\n\nexport default Display;\n","import React from \"react\";\nimport \"./App.css\";\n\nclass ButtonControl extends React.Component {\n  render = () => {\n    return (\n      <span>\n        <button onClick={this.props.functionOnClick} disabled={this.props.isDisabled}>{this.props.btnName}</button>\n      </span>\n    );\n  };\n}\n\nexport default ButtonControl;\n","import React from 'react';\nimport './App.css';\nimport Display from './Display';\nimport ButtonControl from './ButtonControl';\n\n\nclass App extends React.Component {\n\n  state = {\n    counterValue: 0,\n    incStatus: \"\",\n    resetStatus: \"disabled\",\n    counterColor: \"\"\n  }\n\n  changeValue = () => {\n    let currentValue = this.state.counterValue;\n    let newValue = currentValue;\n    if (currentValue < 5) {\n      newValue = currentValue + 1;\n      this.setState({\n        counterValue: newValue,\n        resetStatus: \"\"\n      })\n    } else {\n      this.setState({\n        incStatus: \"disabled\",\n        counterColor: \"counter-warning\"\n      })\n    }\n  }\n\n  resetValue = () => {\n    let newValue = 0;\n    this.setState({\n      counterValue: newValue,\n      resetStatus: \"disabled\",\n      incStatus: \"\",\n      counterColor: \"\"\n    })\n  }\n\n  render = () => {\n    return(\n      <div className=\"App\">\n        <div className=\"counter\">\n          <Display counterValue={this.state.counterValue} counterColor={this.state.counterColor}/>\n          <div className=\"countrol-panel\">\n          <ButtonControl functionOnClick={this.changeValue} btnName={\"inc\"} isDisabled={this.state.incStatus}/>\n          <ButtonControl functionOnClick={this.resetValue} btnName={\"reset\"} isDisabled={this.state.resetStatus}/>\n          </div>\n        </div>\n        </div>\n   \n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}